rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is a collaborator on a trip
    function isCollaborator(tripId) {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/trips/$(tripId)/collaborators/$(request.auth.uid));
    }
    
    // Helper function to validate trip data
    function isValidTripData(data) {
      return data.keys().hasAll(['userId', 'city', 'country', 'startDate']) &&
             data.userId is string &&
             data.city is string &&
             data.country is string &&
             data.startDate is string;
    }
    
    // TRIPS COLLECTION
    // Users can only read/write their own trips or trips they're invited to
    match /trips/{tripId} {
      // Read: Owner or collaborator can read
      allow read: if isOwner(resource.data.userId) || isCollaborator(tripId);
      
      // Create: Only authenticated users, and they must be the owner
      allow create: if isAuthenticated() && 
                   isOwner(request.resource.data.userId) &&
                   isValidTripData(request.resource.data);
      
      // Update: Only owner can update core trip data
      allow update: if isOwner(resource.data.userId) &&
                   isValidTripData(request.resource.data) &&
                   request.resource.data.userId == resource.data.userId; // Prevent ownership transfer
      
      // Delete: Only owner can delete
      allow delete: if isOwner(resource.data.userId);
      
      // TRIP COLLABORATORS SUBCOLLECTION
      match /collaborators/{collaboratorId} {
        // Read: Owner or existing collaborator can read collaborator list
        allow read: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                   isCollaborator(tripId);
        
        // Create: Only trip owner can add collaborators
        allow create: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId);
        
        // Update: Trip owner or the collaborator themselves can update their collaboration status
        allow update: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                     isOwner(collaboratorId);
        
        // Delete: Trip owner or the collaborator themselves can remove collaboration
        allow delete: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                     isOwner(collaboratorId);
      }
      
      // TRIP INVITES SUBCOLLECTION
      match /invites/{inviteId} {
        // Read: Owner or invited user can read invites
        allow read: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                   isOwner(resource.data.invitedUserId);
        
        // Create: Only trip owner can create invites
        allow create: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId);
        
        // Update: Trip owner or invited user can update (for accepting/declining)
        allow update: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                     isOwner(resource.data.invitedUserId);
        
        // Delete: Trip owner or invited user can delete
        allow delete: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                     isOwner(resource.data.invitedUserId);
      }
      
      // TRIP EVENTS SUBCOLLECTION (for collaboration activity log)
      match /events/{eventId} {
        // Read: Owner or collaborator can read events
        allow read: if isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                   isCollaborator(tripId);
        
        // Create: Owner or collaborator can create events
        allow create: if (isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId) ||
                     isCollaborator(tripId)) &&
                     isOwner(request.resource.data.userId); // Event must be created by the authenticated user
        
        // Update: Only the event creator can update their events
        allow update: if isOwner(resource.data.userId);
        
        // Delete: Event creator or trip owner can delete
        allow delete: if isOwner(resource.data.userId) ||
                     isOwner(get(/databases/$(database)/documents/trips/$(tripId)).data.userId);
      }
    }
    
    // USER PROFILES COLLECTION (if we add user profiles later)
    match /users/{userId} {
      // Users can only read/write their own profile
      allow read, write: if isOwner(userId);
    }
    
    // GLOBAL SETTINGS OR PUBLIC DATA (if needed)
    match /public/{document=**} {
      // Public data can be read by authenticated users
      allow read: if isAuthenticated();
      // Only admins can write to public data (no admin system yet, so deny all writes)
      allow write: if false;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}